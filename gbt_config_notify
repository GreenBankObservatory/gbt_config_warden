#! /usr/bin/env python3

"""If given file is non-empty, generate a GBT Config change notification"""


from datetime import datetime
from email.message import EmailMessage
import argparse
import logging
import shutil
import smtplib

from gbt_config_logging import init_logging

LOGGER = logging.getLogger("gbt_config_notify")


def email(
    subject,
    text,
    to,
    from_email,
    reply_to=None,
    smtp_server="smtp.gb.nrao.edu",
    dry_run=False,
):
    """Send an email to SDD with given subject and text"""

    message = EmailMessage()
    message["Subject"] = subject
    message["To"] = to
    message["From"] = from_email
    message["Reply-To"] = reply_to if reply_to else from_email

    message.set_content(text)
    if not dry_run:
        smtplib.SMTP(smtp_server).send_message(message)
        LOGGER.debug("Successfully sent email!")
    else:
        LOGGER.debug("\nThe following email would have been sent if DEBUG were False:")
        LOGGER.debug("+" * 80)
        LOGGER.debug(message)
        LOGGER.debug("+" * 80)


def render_email_body(log_file_text):
    num_files_changed = 0
    files_changed = set()
    for line in log_file_text.splitlines():
        # TODO: Very fragile...
        key = ": A change has been made to "
        if key in line:
            num_files_changed += 1
            files_changed.add(line.split(key)[-1])

    num_unique_files_changed = len(files_changed)
    email_body = (
        f"{num_files_changed} changes have been made across {num_unique_files_changed} files: "
        f"{', '.join(files_changed)}\n\n"
        f"{log_file_text}"
    )
    return num_unique_files_changed, num_files_changed, email_body


def gbt_config_notify(gbt_config_change_log_path, dry_run, to, from_email, reply_to):
    try:
        with open(gbt_config_change_log_path) as log_file:
            log_file_text = log_file.read()
    except FileNotFoundError:
        body = None
        LOGGER.debug("Log file missing! This probably doesn't matter", exc_info=True)
    else:
        if log_file_text:
            num_unique_files_changed, num_files_changed, body = render_email_body(
                log_file_text
            )
            now = datetime.now()
            new_log_path = f"{gbt_config_change_log_path}.{now}.log"
            if not dry_run:
                shutil.move(gbt_config_change_log_path, new_log_path)
                LOGGER.info(
                    f"Successfully moved log file from {gbt_config_change_log_path} "
                    f"to {new_log_path}"
                )
            else:
                LOGGER.debug(
                    f"Would now log file from {gbt_config_change_log_path} to "
                    f"{new_log_path}, but skipping due to dry_run=True"
                )
            email(
                subject=(
                    f"GBT Config Warden: {num_files_changed} changes have been made across "
                    f"{num_unique_files_changed} files in GBT Config"
                ),
                text=body,
                to=to,
                from_email=from_email,
                reply_to=reply_to,
                dry_run=dry_run,
            )
        else:
            LOGGER.debug("Nothing has changed!")


def main():
    args = parse_args()
    init_logging(args.log_path)
    if args.verbose:
        LOGGER.setLevel(logging.DEBUG)
    else:
        LOGGER.setLevel(logging.INFO)

    assert LOGGER.handlers, f"No handlers specificed for logger {LOGGER}"
    gbt_config_notify(
        args.gbt_config_change_log_path,
        args.dry_run,
        args.to,
        args.from_email,
        args.reply_to,
    )


def parse_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("gbt_config_change_log_path")
    parser.add_argument("--to", help="Address(es) to send emails to")
    parser.add_argument("--from-email", help="Address to send emails from")
    parser.add_argument("--reply-to", help="Set email reply to")
    parser.add_argument(
        "--log-path", help="Path to debug log path. If not given, writes to /tmp"
    )
    parser.add_argument(
        "-D",
        "--dry-run",
        action="store_true",
        help="Don't send email; instead print it to stdout",
    )
    parser.add_argument("-v", "--verbose", action="store_true")
    return parser.parse_args()


if __name__ == "__main__":
    main()
