#!/bin/bash

### GBT Config Warden
#
# usage: gbt_config_warden REPO_PATH [RECIPIENT ...]
#
# A simple tool, intended to be run as a cron job, for checking on the status
# of the GBT config repository. If there are files that have been modified
# but not committed, this will be reported via email to RECIPIENT(S). If the 
# repo is clean, only a debug email will go out via the cron daemon.
###

### FLAGS ###
# Bail if any statement returns non-zero
set -o errexit
# Bail if unset variable is accessed
set -o nounset
# Pipelines exit with rightmost non-zero exit code, or zero if fully successful
set -o pipefail

### FUNCTIONS ###

# Called at script exit
cleanup() {
    err_code="${?}"
    if ! [ -z "${body_file+x}" ]; then
        rm "${body_file}"
    fi
    # Perform any necessary cleanup actions
    exit "${err_code}"
}
trap cleanup EXIT

# Exit with an error message
die() {
    echo "$@" >&2
    exit 1
}

### MAIN ###

# Handle CLI
if [ -z "${1+x}" ]; then
    die "usage: gbt_config_warden REPO_PATH [RECIPIENT ...]"
else
    repo="${1}"
fi

# All remaining arguments are treated as email recipients
recipients=("${@:2}")

# cd to given path
cd "${repo}"

# Create temp files
body_file=$(mktemp --suffix=.body_file)

# Store information about the most recent commit
last_commit_info="$(git log -1 --format='Last commit: %cd by %an')"

# If the repo is dirty...
if [ -n "$(git status --untracked-files=no --porcelain)" ]; then
    {
        echo -e "${repo} is dirty!\n"
        echo "${last_commit_info}"
        echo -e "\n--- Current status ---\n"
        git status --untracked-files=no --short
        echo -e "\n--- Differences since last commit ---\n"
        git diff
    } > "${body_file}"
    # If we have recipients, send them an email
    if [ -n "${recipients+x}" ]; then
        # Send email
        mutt -s "GBT Config Warden Report (${repo}): DIRTY" -- "${recipients[@]}" < "${body_file}"
    # Otherwise just print to stdout
    else
        cat "${body_file}"
    fi
    # Use 1 as the exit code for "dirty"
    exit 1
# If the repo is clean...
else
    # These are for debugging only; they will spawn a cron email that goes to
    # whatever MAILTO is in the crontab
    echo "By some miracle, ${repo} is clean!"
    echo "${last_commit_info}"
fi
